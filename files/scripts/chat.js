// Chat.js - –°–∏—Å—Ç–µ–º–∞ —á–∞—Ç–æ–≤

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let allChats = [];
let currentChatMessages = [];
let currentUser = null;
let currentChatUser = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', function() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —á–∞—Ç–∞
    setupChatHandlers();
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —á–∞—Ç–∞ –≤ –Ω–∞–≤–±–∞—Ä
    addChatButtonToNavbar();
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
async function loadCurrentUser() {
    try {
        const token = localStorage.getItem('token');
        if (token) {
            // –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            currentUser = {
                id: 'demo-user-1',
                firstName: '–î–µ–º–æ',
                lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                email: localStorage.getItem('email') || 'demo@example.com'
            };
        }
    } catch (error) {
        console.error('Error loading current user:', error);
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —á–∞—Ç–∞
function setupChatHandlers() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —á–∞—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const chatModal = document.getElementById('chat-modal');
    const chatList = document.getElementById('chat-list');
    
    if (!chatModal || !chatList) {
        console.log('–≠–ª–µ–º–µ–Ω—Ç—ã —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
        return;
    }

    // –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞
    const chatBtn = document.getElementById('chat-btn');
    if (chatBtn) {
        chatBtn.addEventListener('click', openChatModal);
    }

    // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞
    const closeChatBtn = document.getElementById('close-chat-modal');
    if (closeChatBtn) {
        closeChatBtn.addEventListener('click', closeChatModal);
    }

    // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ —á–∞—Ç–∞–º"
    const backToChatsBtn = document.getElementById('back-to-chats');
    if (backToChatsBtn) {
        backToChatsBtn.addEventListener('click', showChatList);
    }

    // –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    const sendMessageBtn = document.getElementById('send-message-btn');
    if (sendMessageBtn) {
        sendMessageBtn.addEventListener('click', sendMessage);
    }

    // –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    const messageInput = document.getElementById('message-input');
    if (messageInput) {
        messageInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });
    }

    // –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    const attachFileBtn = document.getElementById('attach-file-btn');
    const chatFileInput = document.getElementById('chat-file-input');
    if (attachFileBtn && chatFileInput) {
        attachFileBtn.addEventListener('click', () => chatFileInput.click());
        chatFileInput.addEventListener('change', handleFileUpload);
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    document.addEventListener('click', function(e) {
        if (e.target === chatModal) {
            closeChatModal();
        }
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∞–≤–∏—à–µ Escape
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            if (chatModal && chatModal.classList.contains('show')) {
                closeChatModal();
            }
        }
    });
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —á–∞—Ç–∞
async function openChatModal() {
    const modal = document.getElementById('chat-modal');
    const chatList = document.getElementById('chat-list');
    
    if (modal && chatList) {
        modal.classList.add('show');
        await loadCurrentUser(); // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ currentUser –∑–∞–≥—Ä—É–∂–µ–Ω
        loadChats();
    } else {
        console.log('–≠–ª–µ–º–µ–Ω—Ç—ã —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
    }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —á–∞—Ç–∞
function closeChatModal() {
    const modal = document.getElementById('chat-modal');
    if (modal) {
        modal.classList.remove('show');
        showChatList();
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
async function loadChats() {
    try {
        const token = localStorage.getItem('token');
        if (!token) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã —á–∞—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        const chatList = document.getElementById('chat-list');
        if (!chatList) {
            console.log('–≠–ª–µ–º–µ–Ω—Ç—ã —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
            return;
        }

        // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —á–∞—Ç–æ–≤
        allChats = [];
        
        await displayChats();
    } catch (error) {
        console.error('Error loading chats:', error);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
async function displayChats() {
    const chatList = document.getElementById('chat-list');
    if (!chatList) return;

    if (!allChats || allChats.length === 0) {
        chatList.innerHTML = '<div class="no-chats">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤</div>';
        return;
    }

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = [
        { id: 'user_1', firstName: '–ê–ª–µ–∫—Å–µ–π', lastName: '–ü–µ—Ç—Ä–æ–≤', email: 'alex@example.com' },
        { id: 'user_2', firstName: '–ú–∞—Ä–∏—è', lastName: '–ò–≤–∞–Ω–æ–≤–∞', email: 'maria@example.com' }
    ];
    
    chatList.innerHTML = allChats.map(chat => {
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
        const user = users.find(u => u.id === chat.userId);
        const displayName = user ? `${user.firstName || ''} ${user.lastName || ''}`.trim() || user.email : chat.userEmail;
        const avatarText = user ? (user.firstName ? user.firstName.charAt(0).toUpperCase() : user.email.charAt(0).toUpperCase()) : chat.userEmail.charAt(0).toUpperCase();
        
        let productInfo = '';
        let productInfoData = null;
        if (chat.productInfo) {
            productInfo = `
                <div class="chat-product-info">
                    <small>üí¨ –û —Ç–æ–≤–∞—Ä–µ: ${chat.productInfo.title} (${chat.productInfo.price}‚Ç∏)</small>
                </div>
            `;
            productInfoData = chat.productInfo;
        }
        
        return `
            <div class="chat-item" onclick="openChat('${chat.userId}', '${displayName}', ${JSON.stringify(productInfoData).replace(/"/g, '&quot;')})">
                <div class="chat-avatar">
                    ${avatarText}
                </div>
                <div class="chat-info">
                    <div class="chat-name">${displayName}</div>
                    <div class="chat-last-message">${chat.lastMessage || '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π'}</div>
                    ${productInfo}
                </div>
            </div>
        `;
    }).join('');
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async function openChat(userId, userName, productInfo = null) {
    // –ï—Å–ª–∏ productInfo –ø–µ—Ä–µ–¥–∞–Ω–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞, –ø–∞—Ä—Å–∏–º –µ—ë
    if (typeof productInfo === 'string' && productInfo !== 'null') {
        try {
            productInfo = JSON.parse(productInfo);
        } catch (e) {
            productInfo = null;
        }
    }
    
    currentChatUser = { id: userId, name: userName, productInfo: productInfo };
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–æ–±—â–µ–Ω–∏–π
    document.getElementById('chat-list').style.display = 'none';
    document.getElementById('chat-messages').style.display = 'flex';
    document.getElementById('current-chat-user').textContent = userName;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await loadChatMessages(userId);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
async function loadChatMessages(userId) {
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        const chatKey = `chat_${userId}`;
        currentChatMessages = JSON.parse(localStorage.getItem(chatKey) || '[]');
        
        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏—è
        if (currentChatMessages.length === 0) {
            currentChatMessages = [
                {
                    id: 1,
                    text: '–ü—Ä–∏–≤–µ—Ç! –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤–∞—à —Ç–æ–≤–∞—Ä',
                    senderId: userId,
                    receiverId: 'demo-user-1',
                    timestamp: new Date(Date.now() - 3600000).toISOString(),
                    type: 'text'
                },
                {
                    id: 2,
                    text: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö–æ–Ω–µ—á–Ω–æ, —Ä–∞—Å—Å–∫–∞–∂—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ',
                    senderId: 'demo-user-1',
                    receiverId: userId,
                    timestamp: new Date(Date.now() - 1800000).toISOString(),
                    type: 'text'
                }
            ];
            localStorage.setItem(chatKey, JSON.stringify(currentChatMessages));
        }
        
        displayMessages();
    } catch (error) {
        console.error('Error loading messages:', error);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
function displayMessages() {
    const messagesContainer = document.getElementById('messages-container');
    if (!messagesContainer) return;

    console.log('Current user:', currentUser);
    console.log('Current chat messages:', currentChatMessages);

    messagesContainer.innerHTML = currentChatMessages.map(message => {
        const isSent = message.senderId === currentUser.id;
        console.log(`Message ${message.id}: senderId=${message.senderId}, currentUser.id=${currentUser.id}, isSent=${isSent}`);
        
        const messageTime = new Date(message.timestamp).toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit'
        });

        let content = '';
        if (message.image) {
            content = `<img src="../${message.image}" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" class="message-image" onclick="openImageModal('${message.image}')">`;
        } else {
            content = `<div class="message-content">${message.text}</div>`;
        }

        return `
            <div class="message ${isSent ? 'sent' : 'received'}">
                ${content}
                <div class="message-time">${messageTime}</div>
            </div>
        `;
    }).join('');

    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendMessage() {
    if (!currentChatUser) return;

    const messageInput = document.getElementById('message-input');
    const message = messageInput.value.trim();
    
    if (!message) return;

    try {
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ API
        const newMessage = {
            id: Date.now(),
            text: message,
            senderId: currentUser?.id || 'demo-user-1',
            receiverId: currentChatUser.id,
            timestamp: new Date().toISOString(),
            type: 'text'
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        const chatKey = `chat_${currentChatUser.id}`;
        const existingMessages = JSON.parse(localStorage.getItem(chatKey) || '[]');
        existingMessages.push(newMessage);
        localStorage.setItem(chatKey, JSON.stringify(existingMessages));
        
        messageInput.value = '';
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        await loadChatMessages(currentChatUser.id);
    } catch (error) {
        console.error('Error sending message:', error);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
async function handleFileUpload(event) {
    const file = event.target.files[0];
    if (!file || !currentChatUser) return;

    try {
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ API
        const reader = new FileReader();
        reader.onload = function(e) {
            const newMessage = {
                id: Date.now(),
                image: e.target.result,
                senderId: currentUser?.id || 'demo-user-1',
                receiverId: currentChatUser.id,
                timestamp: new Date().toISOString(),
                type: 'image'
            };
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            const chatKey = `chat_${currentChatUser.id}`;
            const existingMessages = JSON.parse(localStorage.getItem(chatKey) || '[]');
            existingMessages.push(newMessage);
            localStorage.setItem(chatKey, JSON.stringify(existingMessages));
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            loadChatMessages(currentChatUser.id);
        };
        reader.readAsDataURL(file);
    } catch (error) {
        console.error('Error sending image:', error);
    }

    // –û—á–∏—â–∞–µ–º input
    event.target.value = '';
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
function showChatList() {
    document.getElementById('chat-list').style.display = 'block';
    document.getElementById('chat-messages').style.display = 'none';
    currentChatUser = null;
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
function openImageModal(imagePath) {
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const modal = document.createElement('div');
    modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.9);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 20000;
        cursor: pointer;
    `;
    
    const img = document.createElement('img');
    img.src = `../${imagePath}`;
    img.style.cssText = `
        max-width: 90%;
        max-height: 90%;
        object-fit: contain;
    `;
    
    modal.appendChild(img);
    document.body.appendChild(modal);
    
    modal.addEventListener('click', () => {
        document.body.removeChild(modal);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —á–∞—Ç–∞ –Ω–∞ –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function addChatButtonToNavbar() {
    const navbarRight = document.querySelector('.navbar-right');
    if (navbarRight && !document.getElementById('chat-btn')) {
        const chatBtn = document.createElement('button');
        chatBtn.id = 'chat-btn';
        chatBtn.className = 'chat-btn';
        chatBtn.title = '–°–æ–æ–±—â–µ–Ω–∏—è';
        chatBtn.innerHTML = `
            <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z" stroke="#141414" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
        `;
        chatBtn.addEventListener('click', openChatModal);
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ auth-buttons
        const authButtons = navbarRight.querySelector('.auth-buttons');
        if (authButtons) {
            navbarRight.insertBefore(chatBtn, authButtons);
        } else {
            navbarRight.appendChild(chatBtn);
        }
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —á–∞—Ç–∞ –Ω–∞ –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', addChatButtonToNavbar);
} else {
    addChatButtonToNavbar();
} 